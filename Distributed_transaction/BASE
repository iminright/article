Base: An Acid Alternative
In partitioned databases, trading some consistency for availability can lead to dramatic improvements in scalability.

Dan Pritchett, Ebay
原文 http://queue.acm.org/detail.cfm?id=1394128

Web applications have grown in popularity over the past decade. Whether you are building an application 
for end users or application developers (i.e., services), your hope is most likely that your application 
will find broad adoption—and with broad adoption will come transactional growth. 
If your application relies upon persistence, then data storage will probably become your bottleneck.
在过去10年Web应用越来越流行。作为一个应用的开发者也好，维护这也好，你肯定希望你的应用程序被越来越多的人使用，如果不幸你的应用
程序依赖于持久化的数据，那么数据存储也许会成为你应用程序的瓶颈。

There are two strategies for scaling any application. 
The first, and by far the easiest, is vertical scaling: moving the application to larger computers. 
Vertical scaling works reasonably well for data but has several limitations. 
The most obvious limitation is outgrowing the capacity of the largest system available. 
Vertical scaling is also expensive, as adding transactional capacity usually requires purchasing the next larger system. 
Vertical scaling often creates vendor lock, further adding to costs.
这里有两个方案来搭建可扩展的应用程序。第一，也是到目前为止最简单的，垂直扩展：将你的应用程序迁移到性能更强的机器上。垂直扩展简单方便但是他有几个限制条件。
最显而易见的一个就是你需要不断的增加性能来应对日益庞大的应用程序，不幸的是垂直扩展的成本非常昂贵的。

Horizontal scaling offers more flexibility but is also considerably more complex. 
Horizontal data scaling can be performed along two vectors. 
Functional scaling involves grouping data by function and spreading functional groups across databases. 
Splitting data within functional areas across multiple databases, or sharding,adds the second dimension to horizontal scaling. 
The diagram in figure 1 illustrates horizontal data-scaling strategies.
还有一个方案，我们称之为水平扩展，他为我们的应用程序提供了更高的扩展性，但是也带了更高的复杂性
水平扩展可以从两个维度入手。
一个维度是根据业务功能扩展，包括将数据按照业务核心功能分组并且将业务组分布在各个数据库中(比如将一个库切为
订单库+产品库+用户库3个库，国内大部分文章将这种切分方式称之为垂直切分，将业务上紧密关联的数据放在一个库中)。
另一个维度是切分数据，一般可以通过分片(比如当订单库数据超过千万级别时，根据订单类型或者追求均匀分片的
话根据订单ID，用户ID什么的作hash将一个表拆成多张表，国内一般称之为水平拆分)。
笔者自己唠叨几句，分库分表效果如何还是看你到底使用了几个数据库实例，因为数据库单库的QPS是有上限的，
如果你只有一个数据库实例，那你分表再分出花来，也是白扯。

As figure 1 illustrates, both approaches to horizontal scaling can be applied at once. 
Users, products, and transactions can be in separate databases. 
Additionally, each functional area can be split across multiple databases for transactional capacity. 
As shown in the diagram, functional areas can be scaled independently of one another.
就如图一所示，水平扩展的两个维度可以同时使用。
用户，产品，交易表可以被放在不同的数据库里。
另，每一个业务库如用户下还可以再分多个库，以提高数据库事务处理能力。
如图所示，业务库的扩展对其他库使透明的。

Functional partitioning is important for achieving high degrees of scalability. 
Any good database architecture will decompose the schema into tables grouped by functionality.
Users, products, transactions, and communication are examples of functional areas.
Leveraging database concepts such as foreign keys is a common approach for maintaining consistency across these functional areas.
业务功能的划分对于实现高度可扩展性的应用程序非常重要。
任何良好的数据库架构都会根据业务分解出对应的scheme，比如user.t_user,user.t_user_log,order.t_order.
Users, products, transactions, and communication都是业务划分的例子。
利用诸如外键（比如order表的productId）的数据库概念是用于在这些业务库之间维持一致性的常用方法。

Relying on database constraints to ensure consistency across functional groups creates a coupling of the schema to a database deployment strategy.
For constraints to be applied, the tables must reside on a single database server, precluding horizontal scaling as transaction rates grow. 
In many cases, the easiest scale-out opportunity is moving functional groups of data onto discrete database servers.
依赖数据库约束以确保跨业务库的一致性会造成不必要的耦合。
要应用数据库的约束，所有的表都必须在一个数据库实例中，显而易见，这样不利于水平扩展。
在大多数情况下，最简单的水平扩展是将数据按业务划分并且放到不同的数据库服务器中。

Schemas that can scale to very high transaction volumes will place functionally distinct data on different database servers. 
This requires moving data constraints out of the database and into the application. 
This also introduces several challenges that are addressed later in this article.
高并发情况下扛得住的方案会将数据分散在不同的数据库服务器中。
这样以来，数据库层面的约束不再有用，这需要我们将原本在数据库层面使用的约束逻辑迁移到应用层。
这么做会带来一些挑战，解决方案将在文章的后面一点提到。

CAP Theorem
Eric Brewer, a professor at the University of California, Berkeley, and cofounder and chief scientist at Inktomi
, made the conjecture that Web services cannot ensure all three of the following properties at once (signified by the acronym CAP):2
CAP 理论
Eric Brewer, 加州大学伯克利分校的教授，证明了你不能同时满足CAP三个条件。

Consistency. The client perceives that a set of operations has occurred all at once.
Availability. Every operation must terminate in an intended response.
Partition tolerance. Operations will complete, even if individual components are unavailable.
Specifically, a Web application can support, at most, only two of these properties with any database design. 
Obviously, any horizontal scaling strategy is based on data partitioning; therefore, designers are forced to decide between consistency and availability.
一致性.客户端在同一时间感知到一组操作在已经产生了结果。
可用性.每个操作必须以预期的响应终止。
分区容差.即使某些组件不可用，操作也将会完成。
特别指出，一个基于数据库设计的WEB应用只能支持上述三个属性中最多两个属性。显然，所有的水平扩展策略都是基于数据分区的；
因此，分区容差是无法避免的，所以设计者将要在一致性和可用性两个方面作出选择。

ACID Solutions
ACID database transactions greatly simplify the job of the application developer. As signified by the acronym, ACID transactions provide the following guarantees:
Atomicity. All of the operations in the transaction will complete, or none will.
Consistency. The database will be in a consistent state when the transaction begins and ends.
Isolation. The transaction will behave as if it is the only operation being performed upon the database.
Durability. Upon completion of the transaction, the operation will not be reversed.

ACID 解决方案
ACID 极大的简化了开发者的工作。ACID提供了如下4个保证：
原子性.所有的操作要么全部完成，要么全部失败。
一致性.数据库在事务开始时和结束时都将保持一致的状态。
隔离性.事务对于其他事务来说是透明的。
持续性.事务完成之后，操作将不会被撤销。

Database vendors long ago recognized the need for partitioning databases and introduced a technique known as 2PC (two-phase commit) for providing ACID guarantees across multiple database instances. The protocol is broken into two phases:
	•	First, the transaction coordinator asks each database involved to precommit the operation and indicate whether commit is possible. If all databases agree the commit can proceed, then phase 2 begins.
	•	The transaction coordinator asks each database to commit the data.

数据库供应商早就认识到数据库需要分区才能提供更高的性能，所以他们引入了2PC这个技术来保证在多数据库实例之间的ACID。这个协议被分为两个阶段。
第一阶段，事务协调者请求每个涉及的数据库执行预提交操作并指示是否可以提交。如果所有的数据库都同意执行那么这个提交就可以执行，接下来就是开始第二阶段。
第二阶段，事务协调者要求每个数据库都去提交他们对数据的改动。

If any database vetoes the commit, then all databases are asked to roll back their portions of the transaction. 
What is the shortcoming? We are getting consistency across partitions.
If Brewer is correct, then we must be impacting availability, but how can that be?
如果有数据库不同意提交，那么所有参与的数据库将会被要求回滚他们的事务。
这么做的缺点是什么呢？我们获得了分布式一致性。
如果Brewer是对的，那将对我们的系统的可用性造成影响，为什么会这样呢？

The availability of any system is the product of the availability of the components required for operation. 
The last part of that statement is the most important. Components that may be used by the system but are not required do not reduce system availability. 
A transaction involving two databases in a 2PC commit will have the availability of the product of the availability of each database. 
For example, if we assume each database has 99.9 percent availability, then the availability of the transaction becomes 99.8 percent, 
or an additional downtime of 43 minutes per month.
任何系统的可用性是操作所需组件可用性的乘积。
每一个被系统使用的组建不可避免的降低了系统的可用性。
一个包含两个数据库事务的2pc提交将会影响两个数据库的可用性？？
举个例子，假设两个数据库都有99.9的可用性，那么事务的可用性将是99.8，换个说法就是每个月都有43min的额外宕机时间。

An ACID Alternative
If ACID provides the consistency choice for partitioned databases, then how do you achieve availability instead? 
One answer is BASE (basically available, soft state, eventually consistent).
一种ACID的替换方案
如果说ACID保证了分布式的一致性，那么你怎么来实现分布式的可用性呢？
答案就是BASE(基本可用，软状态？？，最终一致性)

BASE is diametrically opposed to ACID. Where ACID is pessimistic and forces consistency at the end of every operation, 
BASE is optimistic and accepts that the database consistency will be in a state of flux. Although this sounds impossible to cope with, 
in reality it is quite manageable and leads to levels of scalability that cannot be obtained with ACID.
BASE是ACID的对立面。ACID保证了强一致性，他悲观的认为每一个操作都有失败的可能，
BASE则是乐观的，他接受数据库的最终一致性。尽管这听上去不怎么靠谱，
但事实上它相对ACID更易于管理而且更容易达到更高的水平扩展性。







